/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.constasj.gitea.api;

import io.swagger.client.model.GitignoreTemplateInfo;
import io.swagger.client.model.LabelTemplate;
import io.swagger.client.model.LicenseTemplateInfo;
import io.swagger.client.model.LicensesTemplateListEntry;
import io.swagger.client.model.MarkdownOption;
import io.swagger.client.model.MarkupOption;
import io.swagger.client.model.NodeInfo;
import io.swagger.client.model.ServerVersion;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for MiscellaneousApi
 */
@Ignore
public class MiscellaneousApiTest {

    private final MiscellaneousApi api = new MiscellaneousApi();

    /**
     * Returns information about a gitignore template
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGitignoreTemplateInfoTest() throws Exception {
        String name = null;
        GitignoreTemplateInfo response = api.getGitignoreTemplateInfo(name);

        // TODO: test validations
    }
    /**
     * Returns all labels in a template
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLabelTemplateInfoTest() throws Exception {
        String name = null;
        List<LabelTemplate> response = api.getLabelTemplateInfo(name);

        // TODO: test validations
    }
    /**
     * Returns information about a license template
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLicenseTemplateInfoTest() throws Exception {
        String name = null;
        LicenseTemplateInfo response = api.getLicenseTemplateInfo(name);

        // TODO: test validations
    }
    /**
     * Returns the nodeinfo of the Gitea application
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNodeInfoTest() throws Exception {
        NodeInfo response = api.getNodeInfo();

        // TODO: test validations
    }
    /**
     * Get default signing-key.gpg
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSigningKeyTest() throws Exception {
        String response = api.getSigningKey();

        // TODO: test validations
    }
    /**
     * Returns the version of the Gitea application
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVersionTest() throws Exception {
        ServerVersion response = api.getVersion();

        // TODO: test validations
    }
    /**
     * Returns a list of all gitignore templates
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listGitignoresTemplatesTest() throws Exception {
        List<String> response = api.listGitignoresTemplates();

        // TODO: test validations
    }
    /**
     * Returns a list of all label templates
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listLabelTemplatesTest() throws Exception {
        List<String> response = api.listLabelTemplates();

        // TODO: test validations
    }
    /**
     * Returns a list of all license templates
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listLicenseTemplatesTest() throws Exception {
        List<LicensesTemplateListEntry> response = api.listLicenseTemplates();

        // TODO: test validations
    }
    /**
     * Render a markdown document as HTML
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void renderMarkdownTest() throws Exception {
        MarkdownOption body = null;
        String response = api.renderMarkdown(body);

        // TODO: test validations
    }
    /**
     * Render raw markdown as HTML
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void renderMarkdownRawTest() throws Exception {
        String body = null;
        String response = api.renderMarkdownRaw(body);

        // TODO: test validations
    }
    /**
     * Render a markup document as HTML
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void renderMarkupTest() throws Exception {
        MarkupOption body = null;
        String response = api.renderMarkup(body);

        // TODO: test validations
    }
}

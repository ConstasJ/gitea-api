/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * GeneralUISettings contains global ui settings exposed by API
 */
@Schema(description = "GeneralUISettings contains global ui settings exposed by API")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-02T21:57:57.853188500+08:00[Asia/Hong_Kong]")

public class GeneralUISettings {
  @SerializedName("allowed_reactions")
  private List<String> allowedReactions = null;

  @SerializedName("custom_emojis")
  private List<String> customEmojis = null;

  @SerializedName("default_theme")
  private String defaultTheme = null;

  public GeneralUISettings allowedReactions(List<String> allowedReactions) {
    this.allowedReactions = allowedReactions;
    return this;
  }

  public GeneralUISettings addAllowedReactionsItem(String allowedReactionsItem) {
    if (this.allowedReactions == null) {
      this.allowedReactions = new ArrayList<String>();
    }
    this.allowedReactions.add(allowedReactionsItem);
    return this;
  }

   /**
   * Get allowedReactions
   * @return allowedReactions
  **/
  @Schema(description = "")
  public List<String> getAllowedReactions() {
    return allowedReactions;
  }

  public void setAllowedReactions(List<String> allowedReactions) {
    this.allowedReactions = allowedReactions;
  }

  public GeneralUISettings customEmojis(List<String> customEmojis) {
    this.customEmojis = customEmojis;
    return this;
  }

  public GeneralUISettings addCustomEmojisItem(String customEmojisItem) {
    if (this.customEmojis == null) {
      this.customEmojis = new ArrayList<String>();
    }
    this.customEmojis.add(customEmojisItem);
    return this;
  }

   /**
   * Get customEmojis
   * @return customEmojis
  **/
  @Schema(description = "")
  public List<String> getCustomEmojis() {
    return customEmojis;
  }

  public void setCustomEmojis(List<String> customEmojis) {
    this.customEmojis = customEmojis;
  }

  public GeneralUISettings defaultTheme(String defaultTheme) {
    this.defaultTheme = defaultTheme;
    return this;
  }

   /**
   * Get defaultTheme
   * @return defaultTheme
  **/
  @Schema(description = "")
  public String getDefaultTheme() {
    return defaultTheme;
  }

  public void setDefaultTheme(String defaultTheme) {
    this.defaultTheme = defaultTheme;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralUISettings generalUISettings = (GeneralUISettings) o;
    return Objects.equals(this.allowedReactions, generalUISettings.allowedReactions) &&
        Objects.equals(this.customEmojis, generalUISettings.customEmojis) &&
        Objects.equals(this.defaultTheme, generalUISettings.defaultTheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedReactions, customEmojis, defaultTheme);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralUISettings {\n");
    
    sb.append("    allowedReactions: ").append(toIndentedString(allowedReactions)).append("\n");
    sb.append("    customEmojis: ").append(toIndentedString(customEmojis)).append("\n");
    sb.append("    defaultTheme: ").append(toIndentedString(defaultTheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.21.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ContentsResponse;
import io.swagger.client.model.FileCommitResponse;
import io.swagger.client.model.PayloadCommitVerification;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FilesResponse contains information about multiple files from a repo
 */
@Schema(description = "FilesResponse contains information about multiple files from a repo")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-02T21:57:57.853188500+08:00[Asia/Hong_Kong]")

public class FilesResponse {
  @SerializedName("commit")
  private FileCommitResponse commit = null;

  @SerializedName("files")
  private List<ContentsResponse> files = null;

  @SerializedName("verification")
  private PayloadCommitVerification verification = null;

  public FilesResponse commit(FileCommitResponse commit) {
    this.commit = commit;
    return this;
  }

   /**
   * Get commit
   * @return commit
  **/
  @Schema(description = "")
  public FileCommitResponse getCommit() {
    return commit;
  }

  public void setCommit(FileCommitResponse commit) {
    this.commit = commit;
  }

  public FilesResponse files(List<ContentsResponse> files) {
    this.files = files;
    return this;
  }

  public FilesResponse addFilesItem(ContentsResponse filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<ContentsResponse>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @Schema(description = "")
  public List<ContentsResponse> getFiles() {
    return files;
  }

  public void setFiles(List<ContentsResponse> files) {
    this.files = files;
  }

  public FilesResponse verification(PayloadCommitVerification verification) {
    this.verification = verification;
    return this;
  }

   /**
   * Get verification
   * @return verification
  **/
  @Schema(description = "")
  public PayloadCommitVerification getVerification() {
    return verification;
  }

  public void setVerification(PayloadCommitVerification verification) {
    this.verification = verification;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilesResponse filesResponse = (FilesResponse) o;
    return Objects.equals(this.commit, filesResponse.commit) &&
        Objects.equals(this.files, filesResponse.files) &&
        Objects.equals(this.verification, filesResponse.verification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commit, files, verification);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilesResponse {\n");
    
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    verification: ").append(toIndentedString(verification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
